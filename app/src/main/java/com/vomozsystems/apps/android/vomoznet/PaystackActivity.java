package com.vomozsystems.apps.android.vomoznet;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.splunk.mint.Mint;

import org.json.JSONException;

import java.text.NumberFormat;
import java.util.Calendar;

import cn.pedant.SweetAlert.SweetAlertDialog;
import co.paystack.android.Paystack;
import co.paystack.android.PaystackSdk;
import co.paystack.android.Transaction;
import co.paystack.android.exceptions.ExpiredAccessCodeException;
import co.paystack.android.model.Card;
import co.paystack.android.model.Charge;

public class PaystackActivity extends AppCompatActivity {

    // To get started quickly, change this to your heroku deployment of
    // https://github.com/PaystackHQ/sample-charge-card-backend
    // Step 1. Visit https://github.com/PaystackHQ/sample-charge-card-backend
    // Step 2. Click "Deploy to heroku"
    // Step 3. Login with your heroku credentials or create a free heroku account
    // Step 4. Provide your secret key and an email with which to start all test transactions
    // Step 5. Copy the url generated by heroku (format https://some-url.herokuapp.com) into the space below
    // Set this to a public key that matches the secret key you supplied while creating the heroku instance
    private String paystack_public_key;
    private String paymentId;

    EditText mEditCardNum;
    EditText mEditCVC;
    EditText mEditExpiryMonth;
    EditText mEditExpiryYear;

    ProgressDialog dialog;
    private TextView mTextReference;
    private Charge charge;
    private Transaction transaction;
    private Double totalAmount;
    private String email;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paystack);
        Mint.initAndStartSession(this, "36cc1bd3");
        View.OnFocusChangeListener ofcListener = new MyFocusChangeListener();
        PaystackSdk.initialize(getApplicationContext());

        TextView amountTextView = findViewById(R.id.contribution_amount_textview);
        TextView descriptionTextView = findViewById(R.id.contribution_description_textview);
        String currency = getIntent().getStringExtra(GiveActivity.AMOUNT_CURRENCY);

        totalAmount = getIntent().getDoubleExtra(GiveActivity.TOTAL_AMOUNT, 0D);
        email = getIntent().getStringExtra(GiveActivity.EMAIL);
        paystack_public_key = getIntent().getStringExtra(GiveActivity.PUBLIC_KEY);

        PaystackSdk.setPublicKey(paystack_public_key);

        NumberFormat numberFormat = NumberFormat.getNumberInstance();
        numberFormat.setGroupingUsed(true);
        numberFormat.setMaximumFractionDigits(2);
        numberFormat.setMinimumFractionDigits(2);
        amountTextView.setText(numberFormat.format(totalAmount) + " " + currency.toUpperCase());
        descriptionTextView.setText(getString(R.string.app_name) + " Donation");

        mEditCardNum = findViewById(R.id.edit_card_number);
        mEditCardNum.setOnFocusChangeListener(ofcListener);
        mEditCVC = findViewById(R.id.edit_cvc);
        mEditCVC.setOnFocusChangeListener(ofcListener);
        mEditExpiryMonth = findViewById(R.id.edit_expiry_month);
        mEditExpiryMonth.setOnFocusChangeListener(ofcListener);
        mEditExpiryYear = findViewById(R.id.edit_expiry_year);
        mEditExpiryYear.setOnFocusChangeListener(ofcListener);

        mTextReference = findViewById(R.id.text_reference);

        Button cancelButton = (Button) findViewById(R.id.button_cancel);
        cancelButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });
        Button mButtonPerformLocalTransaction = findViewById(R.id.button_perform_local_transaction);

        mButtonPerformLocalTransaction.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                try {
                    startAFreshCharge(true);
                } catch (Exception e) {
                    String message = String.format("An error occurred while charging card: %s %s", e.getClass().getSimpleName(), e.getMessage());
                    SweetAlertDialog dialog1 = new SweetAlertDialog(PaystackActivity.this, SweetAlertDialog.ERROR_TYPE)
                            .setTitleText(getResources().getString(R.string.app_name))
                            .setContentText(message);
                    dialog1.show();
                    mTextReference.setText(message);
                }
            }
        });
    }

    private void startAFreshCharge(boolean local) {
        // initialize the charge
        mTextReference.setText("");
        charge = new Charge();
        charge.setCard(loadCardFromForm());

        dialog = new ProgressDialog(this);
        dialog.setMessage("Performing transaction... please wait");
        dialog.show();

        if (local) {
            // Set transaction params directly in app (note that these params
            // are only used if an access_code is not set. In debug mode,
            // setting them after setting an access code would throw an exception
            Double amount = totalAmount * 100;
            charge.setAmount(amount.intValue());
            charge.setEmail(email);
            charge.setReference("VMZPAY-" + Calendar.getInstance().getTimeInMillis());
            try {
                charge.putCustomField("Charged From", "Android SDK");
            } catch (JSONException e) {
                e.printStackTrace();
            }
            chargeCard();
        }
    }

    /**
     * Method to validate the form, and set errors on the edittexts.
     */
    private Card loadCardFromForm() {
        //validate fields
        Card card;

        String cardNum = mEditCardNum.getText().toString().trim();

        //build card object with ONLY the number, update the other fields later
        card = new Card.Builder(cardNum, 0, 0, "").build();
        String cvc = mEditCVC.getText().toString().trim();
        //update the cvc field of the card
        card.setCvc(cvc);

        //validate expiry month;
        String sMonth = mEditExpiryMonth.getText().toString().trim();
        int month = 0;
        try {
            month = Integer.parseInt(sMonth);
        } catch (Exception ignored) {
        }

        card.setExpiryMonth(month);

        String sYear = mEditExpiryYear.getText().toString().trim();
        int year = 0;
        try {
            year = Integer.parseInt(sYear);
        } catch (Exception ignored) {
        }
        card.setExpiryYear(year);

        return card;
    }

    @Override
    public void onPause() {
        super.onPause();

        if ((dialog != null) && dialog.isShowing()) {
            dialog.dismiss();
        }
        dialog = null;
    }

    private class MyFocusChangeListener implements View.OnFocusChangeListener {

        public void onFocusChange(View v, boolean hasFocus){

            if(!hasFocus) {

                InputMethodManager imm =  (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.hideSoftInputFromWindow(v.getWindowToken(), 0);

            }
        }
    }

    private void chargeCard() {

        transaction = null;
        PaystackSdk.chargeCard(this, charge, new Paystack.TransactionCallback() {
            // This is called only after transaction is successful
            @Override
            public void onSuccess(Transaction transaction) {
                dismissDialog();

                PaystackActivity.this.transaction = transaction;
                Toast.makeText(PaystackActivity.this, transaction.getReference(), Toast.LENGTH_LONG).show();
                updateTextViews();
               // new verifyOnServer().execute(transaction.getReference());
                Intent data = new Intent();
                data.putExtra(GiveActivity.PAYMENT_ID, transaction.getReference());
                setResult(RESULT_OK, data);
                finish();
            }

            // This is called only before requesting OTP
            // Save reference so you may send to server if
            // error occurs with OTP
            // No need to dismiss dialog
            @Override
            public void beforeValidate(Transaction transaction) {
                PaystackActivity.this.transaction = transaction;
                Toast.makeText(PaystackActivity.this, transaction.getReference(), Toast.LENGTH_LONG).show();
                updateTextViews();
            }

            @Override
            public void onError(Throwable error, final Transaction transaction) {
                // If an access code has expired, simply ask your server for a new one
                // and restart the charge instead of displaying error
                PaystackActivity.this.transaction = transaction;
                if (error instanceof ExpiredAccessCodeException) {
                    PaystackActivity.this.startAFreshCharge(false);
                    PaystackActivity.this.chargeCard();
                    return;
                }

                dismissDialog();

                if (transaction.getReference() != null) {
                    Toast.makeText(PaystackActivity.this, transaction.getReference() + " concluded with error: " + error.getMessage(), Toast.LENGTH_LONG).show();
                    String message = String.format("%s  concluded with error: %s %s", transaction.getReference(), error.getClass().getSimpleName(), error.getMessage());
                    SweetAlertDialog dialog1 = new SweetAlertDialog(PaystackActivity.this, SweetAlertDialog.ERROR_TYPE)
                            .setTitleText(getResources().getString(R.string.app_name))
                            .setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {
                                @Override
                                public void onClick(SweetAlertDialog sweetAlertDialog) {
                                    //new verifyOnServer().execute(transaction.getReference());
                                    finish();
                                }
                            })
                            .setContentText(message);

                    dialog1.show();
                    mTextReference.setText(message);

                } else {
                    Toast.makeText(PaystackActivity.this, error.getMessage(), Toast.LENGTH_LONG).show();
                    String message = String.format("Error: %s %s", error.getClass().getSimpleName(), error.getMessage());
                    SweetAlertDialog dialog1 = new SweetAlertDialog(PaystackActivity.this, SweetAlertDialog.ERROR_TYPE)
                            .setTitleText(getResources().getString(R.string.app_name))
                            .setContentText(message);

                    dialog1.show();
                    mTextReference.setText(message);
                }
                updateTextViews();
            }

        });
    }

    private void dismissDialog() {
        if ((dialog != null) && dialog.isShowing()) {
            dialog.dismiss();
        }
    }

    private void updateTextViews() {
        if (transaction.getReference() != null) {
            mTextReference.setText(String.format("Reference: %s", transaction.getReference()));
        } else {
            mTextReference.setText("No transaction");
        }
    }

    private boolean isEmpty(String s) {
        return s == null || s.length() < 1;
    }

}
